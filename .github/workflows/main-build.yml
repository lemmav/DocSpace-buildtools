name: 4testing multiarch-build

on:
  workflow_dispatch:
    inputs:
      zap:
        description: 'Run ZAP scanning after build?'
        type: boolean

  repository_dispatch:
    types:
      - cron-trigger-action
      - config-trigger-action
      - client-trigger-action
      - server-trigger-action

env:
  DOCKER_PATH: "buildtools/install/docker"
  REPO: "lemmav"
  DOCKER_IMAGE_PREFIX: "4testing-docspace"
  DOCKERFILE: "Dockerfile.app"

jobs:

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/amd64]
        branch: ${{ github.event.client_payload.branches }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: buildtools
          ref: ${{ matrix.branch }}
      - name: Checkout-server
        uses: actions/checkout@v3
        with:
          repository: ONLYOFFICE/DocSpace-server
          path: server
          ref: ${{ matrix.branch }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Free Disk Space
        run: |
          sudo rm -rf /usr/local/lib/android /opt/ghc
          sudo docker image prune --all --force

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build 4testing
        id: build
        run: |
          cd .${DOCKER_PATH}
          if [ "${{ matrix.branch }}" = "develop" ]; then
            PRODUCT_VERSION="develop"
            DOCKER_TAG=${PRODUCT_VERSION}.${{ github.run_number }}
          else
            PRODUCT_VERSION=$(echo "${{ matrix.branch }}" | sed '/^release\b\|^hotfix\b\|^feature\b/s/release.*\/\|hotfix.*\/\|feature.*\///; s/-git-action$//; s/^v//') 
            DOCKER_TAG=${PRODUCT_VERSION}.${{github.run_number}}
          fi
          export DOCKER_TAG
          
          docker buildx bake -f identity.yml \
          --set *.platform=linux/amd64 \
          --push
          
          echo "payload: ${{ toJson(github.event.client_payload) }}"
          BUILDTOOLS_ENV="${{ github.event.client_payload.hashes[ format('{0}_buildtools_hash', matrix.branch)] }}"
          SERVER_ENV="${{ github.event.client_payload.hashes[ format('{0}_server_hash', matrix.branch)] }}"
          CLIENT_ENV="${{ github.event.client_payload.hashes[ format('{0}_client_hash', matrix.branch)] }}"
          echo "buildtools_hash: $BUILDTOOLS_ENV"
          echo "server_hash: $SERVER_ENV"
          echo "client_hash: $CLIENT_ENV"
          docker buildx bake -f build.yml \
          --set *.args.GIT_BRANCH=${{ matrix.branch }} \
          --set *.args.PRODUCT_VERSION=${PRODUCT_VERSION} \
          --set *.args.BUILD_NUMBER=${BUILD_NUMBER} \
          --set *.platform=linux/amd64 \
          --set *.args.PRODUCT_VERSION=${PRODUCT_VERSION} \
          --set *.args.BUILD_NUMBER=${{github.run_number}} \
          --set *.args.BUILDTOOLS_COMMIT=$BUILDTOOLS_ENV \
          --set *.args.SERVER_COMMIT=$SERVER_ENV \
          --set *.args.CLIENT_COMMIT=$CLIENT_ENV \
          --push

          echo "version=${DOCKER_TAG}" >> "$GITHUB_OUTPUT"
        shell: bash
