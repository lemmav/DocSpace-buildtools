name: self-hosted multiarch-build
on:
  workflow_dispatch:
env:
  DOCKER_PATH: "/install/docker"
  REPO: "lemmav"
  DOCKER_IMAGE_PREFIX: "4testing-docspace"
  DOCKERFILE: "Dockerfile.app"
  FILE: "build.yml"
  PRODUCT_NAME: "4testing-docspace-socket" 
  REGISTRY_URL: "https://hub.docker.com/v2/repositories"  


jobs:
  build:
    runs-on: self-hosted
    strategy:
      matrix:
        platform: [linux/amd64]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Free Disk Space
        run: |
          sudo rm -rf /usr/local/lib/android /opt/ghc
          sudo docker image prune --all --force

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
            
      - name: Test Container
        run: |
          echo "test ${{github.head_ref}}"
          cd .${DOCKER_PATH}
          docker network create -d bridge onlyoffice
          sleep 30
          docker-compose -f db.yml up -d
          sleep 30
          docker-compose -f elasticsearch.yml up -d
          sleep 30
          docker-compose -f redis.yml up -d
          sleep 30
          docker-compose -f rabbitmq.yml up -d
          sleep 30
          docker-compose -f healthchecks.yml up -d
          sleep 30
          docker-compose -f migration-runner.yml up -d
          sleep 30
          docker-compose -f docspace.yml up -d
          sleep 30
          docker-compose -f notify.yml up -d

          HAS_ERROR=false
          LOG_FILE="logs.txt"
          CONTAINER_IDS=$(docker-compose -f docspace.yml ps -q --all)
          for CONTAINER_ID in $CONTAINER_IDS; do
            CONTAINER_NAME=$(docker inspect -f '{{.Name}}' $CONTAINER_ID)
            CONTAINER_STATUS=$(docker inspect -f '{{.State.Status}}' $CONTAINER_ID)
            if [ "$CONTAINER_NAME" == "/onlyoffice-migration-runner" ] ; then
              if [ "$CONTAINER_STATUS" == "exited" ] ; then
                echo "$CONTAINER_NAME container has successfully exited." >> $LOG_FILE
              else
                echo "Error: $CONTAINER_NAME container is $CONTAINER_STATUS." >> $LOG_FILE
                HAS_ERROR=true
              fi
            else 
              if [ "$CONTAINER_STATUS" == "running" ] ; then
                echo "$CONTAINER_NAME container is running." >> $LOG_FILE
              else
                echo "Error: $CONTAINER_NAME container is $CONTAINER_STATUS." >> $LOG_FILE
                HAS_ERROR=true
              fi
            fi
          done
          if [ "$HAS_ERROR" = true ]; then
            exit 1
          fi



          

          
        shell: bash