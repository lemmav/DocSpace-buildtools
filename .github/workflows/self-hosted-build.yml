name: 4testing multiarch-build
on:
  workflow_dispatch:
env:
  DOCKER_PATH: "/install/docker"
  REPO: "lemmav"
  DOCKER_IMAGE_PREFIX: "4testing-docspace"
  DOCKERFILE: "Dockerfile.app"
  FILE: "build.yml"
  PRODUCT_NAME: "4testing-docspace-socket" 
  REGISTRY_URL: "https://hub.docker.com/v2/repositories"  


jobs:
  build:
    runs-on: self-hosted
    strategy:
      matrix:
        platform: [linux/amd64]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Free Disk Space
        run: |
          sudo rm -rf /usr/local/lib/android /opt/ghc
          sudo docker image prune --all --force

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
            
      - name: Test Container
        run: |
          echo "test ${{github.head_ref}}"
          cd .${DOCKER_PATH}
          DOCKER_TAG=$(curl -s -H -X ${REGISTRY_URL}/${REPO}/${PRODUCT_NAME}/tags/?page_size=100 | jq -r '.results|.[]|.name' | grep -E '^[0-9]+(\.[0-9]+){3}$' | head -n1)
  
          DOCKER_IMAGES=$(grep -oP '(?<=image: ")[^"]+' $FILE | sed -e "s/\${REPO}/$REPO/g ;  s/\${DOCKER_IMAGE_PREFIX}/$DOCKER_IMAGE_PREFIX/g ; s/\${DOCKER_TAG}/$DOCKER_TAG/g" |  tr '\n' ' ' )
          IFS=" " read -a IMAGES <<< "$DOCKER_IMAGES"
  
          for IMAGE in ${IMAGES[@]}; do
              NEW_IMAGE=$(echo $IMAGE | sed -Ee "s/4testing-//; s/\.[0-9]+$//")
              NEW_IMAGE_LATEST=$(echo $IMAGE | sed -Ee "s/4testing-//; s/$DOCKER_TAG/latest/")
  
              docker pull "$IMAGE"
              docker tag "$IMAGE" "$NEW_IMAGE"
  
              CONTAINER_ID=$(docker run -d --name test-container "$NEW_IMAGE")
              sleep 120
              CONTAINER_STATUS=$(docker inspect -f '{{.State.Status}}' $CONTAINER_ID)
              if [ "$CONTAINER_STATUS" != "restarting" ]; then
                  echo "Container is running and not restarting."
              else
                  echo "Container is restarting."
                  exit 1
              fi

              docker stop $CONTAINER_ID
              docker rm $CONTAINER_ID
          done
          
        shell: bash